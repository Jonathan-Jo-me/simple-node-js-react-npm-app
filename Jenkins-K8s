pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'jonathan02/simple-node-js-react-npm-app'  // Adjust this to match your Docker repository
        IMAGE_TAG = "${DOCKER_REGISTRY}:${env.BUILD_NUMBER}"  // Full image name with build number
        AWS_REGION = 'ap-south-1'
    }

    stages {
        stage('Code Checkout') {
            steps {
                echo "Checking out the application code"
                checkout scm  // Checks out the code from the configured repository in Jenkins
            }
        }

        stage('Docker Build') {
            steps {
                echo "Building Docker image"
                sh 'docker build -t ${IMAGE_TAG} .'
                echo "Docker image built successfully"
            }
        }

        stage('Publish to DockerHub') {
            steps {
                echo "Logging in to DockerHub and pushing the image"
                withCredentials([usernamePassword(credentialsId: 'docker-credential', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'
                    sh 'docker push ${IMAGE_TAG}'
                }
                echo "Docker image pushed successfully"
            }
        }

        stage('Deploy to EKS') {
            steps {
                echo "Deploying to EKS Cluster"
                withCredentials([aws(credentialsId: 'aws-credentials', region: AWS_REGION)]) {
                    sh 'aws eks update-kubeconfig --name my-eks-CqtrLBou --region ap-south-1'
                    sh 'kubectl get nodes'
                    sh "sed -i 's#TAG#${IMAGE_TAG}#g' deployment.yaml"  // Replace TAG in deployment.yaml with the actual image tag
                    sh 'kubectl apply -f deployment.yaml'
                    sh 'kubectl get deployment -n dev'
                }
                echo "Deployed to EKS Cluster"
            }
        }

        stage('Send Notification') {
            steps {
                echo "Sending email notification"
                script {
                    def jobName = env.JOB_NAME
                    def buildNumber = env.BUILD_NUMBER
                    def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                    def bannerColor = (pipelineStatus == 'SUCCESS') ? 'green' : 'red'

                    def body = """<html>
                                    <body>
                                        <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                            <h2>${jobName} - Build ${buildNumber}</h2>
                                            <div style="background-color: ${bannerColor}; padding: 10px;">
                                                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                            </div>
                                            <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                                        </div>
                                    </body>
                                  </html>"""
                    emailext (
                        subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                        body: body,
                        to: 'jonathanjonathanjo10@gmail.com',
                        from: 'jonathanjonathanjo10@gmail.com',
                        replyTo: 'jonathanjonathanjo10@gmail.com',
                        mimeType: 'text/html'
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean up the workspace after the pipeline completes
        }
    }
}
