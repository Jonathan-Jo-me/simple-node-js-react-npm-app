pipeline {
    agent any

    environment {
        IMAGE_NAME = 'simple-node-js-react-npm-app'
        DOCKER_REGISTRY = 'jonathan02' // Your Docker Hub username
        IMAGE_TAG = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_NUMBER}" // Generates a tag like jonathan02/simple-node-js-react-npm-app:1
    }

    stages {
        stage('Clean Workspace') {
            steps {
                sh 'rm -rf node_modules'
            }
        }

        stage('Build') { 
            steps {
                sh 'npm install' 
            }
        }

        stage('Test') {
            steps {
                echo "Running Tests"
                sh './jenkins/scripts/test.sh'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credential', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    // Securely logging into Docker Hub
                    sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                }
                echo 'Successfully logged into Docker Hub'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image
                sh 'docker build -t $IMAGE_TAG -f jenkins/Dockerfile .'
                echo "Docker image built successfully"
                sh 'docker images'
            }
        }

        stage('Trivy Scan') {
            steps {
                echo "Running Trivy scan on the Docker image"
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh "trivy image --no-progress --exit-code 1 --severity MEDIUM,HIGH,CRITICAL --format table $IMAGE_TAG"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                // Push the Docker image to the registry
                sh 'docker push $IMAGE_TAG'
                echo "Docker image pushed successfully"
            }
        }
    }

    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS' // Default to SUCCESS if no failures occurred
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result
                def bannerColor = (pipelineStatus == 'SUCCESS') ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                                    </div>
                                </body>
                              </html>"""
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'jonathanjonathanjo10@gmail.com',
                    from: 'jonathanjonathanjo10@gmail.com',
                    replyTo: 'jonathanjonathanjo10@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
